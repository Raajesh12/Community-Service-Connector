package com.example.raajesharunachalam.communityserviceconnector;

import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.provider.CalendarContract;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.squareup.picasso.Picasso;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/**
 * Class that is an adapter to a RecyclerView which binds data from Event objeccts to their
 * associated Viewholders.
 * <p>
 * Created by raajesharunachalam on 4/9/17.
 *
 * @author arnchlm2
 */

public class EventAdapter extends RecyclerView.Adapter<EventAdapter.EventListHolder> {
    private Context context;
    private ArrayList<Event> events;
    long calendarID;
    String username;
    Uri photoURL;

    public EventAdapter(Context context, ArrayList<Event> events, long calendarID, String username, Uri photoURL) {
        this.context = context;
        this.events = events;
        this.calendarID = calendarID;
        this.username = username;
        this.photoURL = photoURL;
    }

    public void setEvents(ArrayList<Event> newEvents) {
        this.events = newEvents;
    }

    public ArrayList<Event> getEvents() {
        return events;
    }

    /**
     * Inflates an XML file for an EventListHolder ViewHolder so it can be displayed on screen and
     * returns this set of newly inflated XML elements.
     *
     * @param parent   The ViewGroup into which the new View will be added after it is bound to an
     *                 adapter position.
     * @param viewType The view type of the new View.
     * @return An EventListHolder ViewHolder that has been properly created and its associated XML
     * file has been properly inflated.
     */
    @Override
    public EventListHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        LayoutInflater inflater = LayoutInflater.from(context);
        int movieItemLayout = R.layout.event_list_item;
        boolean shouldAttachToParent = false;
        View view = inflater.inflate(movieItemLayout, parent, shouldAttachToParent);
        return new EventListHolder(view);
    }

    /**
     * Takes data from a given event object and places it in the proper XML elements of the
     * associated Viewholder.
     *
     * @param holder   An EventListHolder ViewHolder object that represents each Event in the
     *                 Recyclerview.
     * @param position The index of the current Event element that is being bound with data and
     *                 displayed.
     */
    @Override
    public void onBindViewHolder(final EventListHolder holder, final int position) {
        final Event event = events.get(position);

        Picasso.with(context).load(event.getImageURL()).fit().into(holder.eventLogo);
        holder.eventTitle.setText(event.getTitle());

        String description = event.getDescription();
        String descriptionShortened;
        if (description.length() >= 40) {
            descriptionShortened = description.substring(0, 40) + "...";
        } else {
            descriptionShortened = description;
        }
        holder.eventDescription.setText(descriptionShortened);
        holder.eventAddress.setText(event.getAddress());
        holder.eventDate.setText(event.getStartDate() + " - " + event.getEndDate());

        String time = event.getStartTime() + " - " + event.getEndTime();
        holder.eventTime.setText(time);

        holder.numberInterested.setText(String.valueOf(event.getPeopleInterested().size()));

        holder.itemView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(context, EventDetailActivity.class);
                intent.putExtra(context.getString(R.string.event_key), event);
                intent.putExtra(context.getString(R.string.display_name_key), username);
                intent.putExtra(context.getString(R.string.display_photo_key), photoURL);
                context.startActivity(intent);
            }
        });

        final FirebaseDatabase database = FirebaseDatabase.getInstance();
        DatabaseReference eventsReference = database.getReference("Events");
        DatabaseReference eventReference = eventsReference.child(event.getTitle());
        DatabaseReference peopleReference = eventReference.child("People Interested");

        //Updates the number of people interested after a user clicks the I'm Interested button
        peopleReference.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                Log.e("Number", String.valueOf(dataSnapshot.getKey()));
                event.getPeopleInterested().clear();
                List<String> peopleInterested = new ArrayList<String>();
                for (DataSnapshot child : dataSnapshot.getChildren()) {
                    peopleInterested.add((String) child.getValue());
                }
                event.setPeopleInterested(peopleInterested);
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });
    }

    /**
     * Returns the number of events contained in this adapter.
     *
     * @return the number of Event object that this adapter has.
     */
    @Override
    public int getItemCount() {
        return events.size();
    }

    /**
     * Represents a ViewHolder for each Event object with its associated XML elements for its data
     */
    class EventListHolder extends RecyclerView.ViewHolder {
        View itemView;
        ImageView eventLogo;
        TextView eventTitle;
        TextView eventDescription;
        TextView eventAddress;
        TextView eventDate;
        TextView eventTime;
        TextView numberInterested;

        public EventListHolder(View itemView) {
            super(itemView);
            this.itemView = itemView;
            eventLogo = (ImageView) (itemView.findViewById(R.id.event_logo));
            eventTitle = (TextView) (itemView.findViewById(R.id.event_title));
            eventDescription = (TextView) (itemView.findViewById(R.id.event_description));
            eventAddress = (TextView) (itemView.findViewById(R.id.event_address));
            eventDate = (TextView) (itemView.findViewById(R.id.event_date));
            eventTime = (TextView) (itemView.findViewById(R.id.event_time));
            numberInterested = (TextView) (itemView.findViewById(R.id.people_interested_actual));
        }
    }
}
