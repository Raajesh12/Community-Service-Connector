package com.example.raajesharunachalam.communityserviceconnector;

import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.TimePicker;

import com.firebase.ui.auth.AuthUI;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import java.util.HashMap;
import java.util.Map;

public class CreateEventActivity extends AppCompatActivity {

    static final int MID_DAY = 12;
    static final int NEW_DAY = 24;

    double latitude;
    double longitude;
    EditText title;
    EditText description;
    EditText address;
    DatePicker startDate;
    TimePicker startTime;
    DatePicker endDate;
    TimePicker endTime;
    EditText imageUrl;
    Button submitButton;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_create_event);

        Intent intent = getIntent();
        if(intent.hasExtra(getString(R.string.latitude_key)) && intent.hasExtra(getString(R.string.longitude_key))){
            latitude = intent.getDoubleExtra(getString(R.string.latitude_key), 0.0);
            longitude = intent.getDoubleExtra(getString(R.string.longitude_key), 0.0);
        }

        title = (EditText) findViewById(R.id.create_event_title_actual);
        description = (EditText) findViewById(R.id.create_event_description_actual);
        address = (EditText) findViewById(R.id.create_event_address_actual);
        startDate = (DatePicker) findViewById(R.id.create_event_start_date_actual);
        startTime = (TimePicker) findViewById(R.id.create_event_start_time_actual);
        endDate = (DatePicker) findViewById(R.id.create_event_end_date_actual);
        endTime = (TimePicker) findViewById(R.id.create_event_end_time_actual);
        imageUrl = (EditText) findViewById(R.id.create_event_image_actual);

        FirebaseDatabase database = FirebaseDatabase.getInstance();
        final DatabaseReference eventsReference = database.getReference("events");

        submitButton = (Button) findViewById(R.id.create_event_submit_button);

        submitButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String titleEntered = title.getText().toString();
                DatabaseReference event = eventsReference.child(titleEntered);
                String descriptionInput = description.getText().toString();
                event.child("Description").setValue(descriptionInput);

                String addressInput = address.getText().toString();
//                event.child("Address").setValue(addressInput);

                String startDateInput = (startDate.getMonth() + 1) + "/" + startDate.getDayOfMonth() + "/"
                        + startDate.getYear();
//                event.child("Start Date").setValue(startDateInput);

                String startTimeInput = getFormattedTime(startTime.getCurrentHour(), startTime.getCurrentMinute());
//                event.child("Start Time").setValue(startTimeInput);

                String endDateInput =  (endDate.getMonth() + 1) + "/" + endDate.getDayOfMonth() + "/"
                        + endDate.getYear();
//                event.child("End Date").setValue(endDateInput);

                String endTimeInput = getFormattedTime(endTime.getCurrentHour(), endTime.getCurrentMinute());
//                event.child("End Time").setValue(endTimeInput);

                String imageUrlInput = imageUrl.getText().toString();
//                event.child("Image URL").setValue(imageUrlInput);

                Map<String, String> eventDetails = new HashMap();
                eventDetails.put("Description", descriptionInput);
                eventDetails.put("Address", addressInput);
                eventDetails.put("Start Date", startDateInput);
                eventDetails.put("Start Time", startTimeInput);
                eventDetails.put("End Date", endDateInput);
                eventDetails.put("End Time", endTimeInput);
                eventDetails.put("Image URL", imageUrlInput);

                event.setValue(eventDetails);
            }
        });
    }

    public static String getFormattedTime(int hour, int minute){
        String periodOfDay;
        if(hour > MID_DAY){
            hour -= 12;
            periodOfDay = "PM";
        } else if(hour == NEW_DAY){
            hour -= 12;
            periodOfDay = "AM";
        } else{
            periodOfDay = "AM";
        }

        String minuteString;
        if(minute == 0 ){
            minuteString = "00";
        } else{
            minuteString = String.valueOf(minute);
        }

        String formattedTime = hour + ":" + minuteString + " " + periodOfDay;
        return formattedTime;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.constant_menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if(item.getItemId() == R.id.menu_sign_out_button){
            AuthUI.getInstance().signOut(this);
            Intent intent = new Intent(CreateEventActivity.this, AuthActivity.class);
            intent.putExtra(getString(R.string.sign_out_key), "Signed Out");
            startActivity(intent);
            return true;
        }
        else{
            return super.onOptionsItemSelected(item);
        }
    }
}
