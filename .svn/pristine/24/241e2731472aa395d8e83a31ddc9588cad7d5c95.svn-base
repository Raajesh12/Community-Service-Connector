package com.example.raajesharunachalam.communityserviceconnector;

import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.provider.CalendarContract;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

import com.firebase.ui.auth.AuthUI;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.squareup.picasso.Picasso;

import java.util.Calendar;

/**
 * Activity that provides more details and user action options for a specific event that the user
 * has clicked on
 *
 * @author arnchlm2
 */
public class EventDetailActivity extends AppCompatActivity {

    public static final int CALENDAR_ID = 1;

    public static final int IMAGE_DIMENSION = 40;

    TextView userName;
    ImageView userIcon;
    String displayName;
    Uri photoURL;
    Event event;
    TextView title;
    ImageView image;
    TextView description;
    TextView address;
    TextView date;
    TextView time;
    TextView peopleInterested;
    Button viewPeople;
    TextView eventLink;
    Button addToCalendar;
    Button interestedButton;
    Button mapsButton;

    /**
     * Binds all the data for each a specific event and sets the onClickListeners for different
     * buttons that allow the user to perform certain actions.
     *
     * @param savedInstanceState A previous instance of the activity
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_event_detail);

        userName = (TextView) findViewById(R.id.event_detail_user_name);
        userIcon = (ImageView) findViewById(R.id.event_detail_user_icon);
        title = (TextView) findViewById(R.id.event_detail_title);
        image = (ImageView) findViewById(R.id.event_detail_image);
        description = (TextView) findViewById(R.id.event_detail_description_actual);
        address = (TextView) findViewById(R.id.event_detail_address_actual);
        date = (TextView) findViewById(R.id.event_detail_date_actual);
        time = (TextView) findViewById(R.id.event_detail_time_actual);
        peopleInterested = (TextView) findViewById(R.id.event_detail_people_interested_actual);
        viewPeople = (Button) findViewById(R.id.event_detail_view_people);
        eventLink = (TextView) findViewById(R.id.event_detail_link_actual);
        addToCalendar = (Button) findViewById(R.id.event_detail_add_to_calendar);
        interestedButton = (Button) findViewById(R.id.event_detail_interested_button);
        mapsButton = (Button) findViewById(R.id.event_detail_maps_button);

        Intent intent = getIntent();
        if (intent.hasExtra(getString(R.string.event_key))) {
            event = (Event) intent.getParcelableExtra(getString(R.string.event_key));
        }

        //Loads the username and photo at the top of the activity
        if (intent.hasExtra(getString(R.string.display_name_key)) && intent.hasExtra(getString(R.string.display_photo_key))) {
            displayName = intent.getStringExtra(getString(R.string.display_name_key));
            userName.setText("User: " + displayName);

            photoURL = (Uri) intent.getParcelableExtra(getString(R.string.display_photo_key));
            if (photoURL != null) {
                Picasso.with(this).load(photoURL).resize(IMAGE_DIMENSION, IMAGE_DIMENSION).into(userIcon);
            }
        }

        title.setText(event.getTitle());
        Picasso.with(this).load(event.getImageURL()).resize(400, 300).into(image);
        description.setText(event.getDescription());
        address.setText(event.getAddress());
        date.setText(event.getStartDate() + " - " + event.getEndDate());
        time.setText(event.getStartTime() + " - " + event.getEndTime());
        peopleInterested.setText(String.valueOf(event.getPeopleInterested().size()));

        //Sets up the AlertDialog that pops up with the list of people that are interested in a given event
        viewPeople.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(EventDetailActivity.this);
                dialogBuilder.setTitle("People Interested");

                ScrollView scrollView = new ScrollView(EventDetailActivity.this);

                TextView peopleInterested = new TextView(EventDetailActivity.this);
                peopleInterested.setPadding(20, 20, 20, 20);
                peopleInterested.setMaxHeight(200);
                //peopleInterested.setTextColor();
                peopleInterested.setTextSize(18);

                StringBuilder peopleList = new StringBuilder();
                if (event.getPeopleInterested().size() == 0) {
                    peopleList.append("None");
                } else {
                    for (String personName : event.getPeopleInterested()) {
                        peopleList.append(personName + "\n" + "\n");
                    }
                }
                peopleInterested.setText(peopleList.toString());
                peopleInterested.setMovementMethod(new ScrollingMovementMethod());

                dialogBuilder.setView(peopleInterested);

                dialogBuilder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                    }
                });

                dialogBuilder.show();
            }
        });

        eventLink.setText(event.getEventLink());

        /**
         * Adds each event that was clicked on to the device's calendar by sending the appropriate
         * data. Code modeled from https://developer.android.com/guide/topics/providers/calendar-provider.html
         */
        addToCalendar.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                long startMillis = calculateTimeInMillis(event.getStartDate(), event.getStartTime());
                long endMillis = calculateTimeInMillis(event.getEndDate(), event.getEndTime());
                String title = event.getTitle();
                String address = event.getAddress();
                String description = event.getDescription();
                long calID = CALENDAR_ID;

                //Inserts the Event with all of its individual details into the device's calendar
                ContentResolver cr2 = EventDetailActivity.this.getContentResolver();
                ContentValues values = new ContentValues();
                values.put(CalendarContract.Events.DTSTART, startMillis);
                values.put(CalendarContract.Events.DTEND, endMillis);
                values.put(CalendarContract.Events.TITLE, title);
                values.put(CalendarContract.Events.EVENT_LOCATION, address);
                values.put(CalendarContract.Events.DESCRIPTION, description);
                values.put(CalendarContract.Events.CALENDAR_ID, calID);
                values.put(CalendarContract.Events.EVENT_TIMEZONE, "America/Chicago");
                try {
                    cr2.insert(CalendarContract.Events.CONTENT_URI, values);

                    //Tells the user that it the event has been added
                    String eventAdded = "This event has been added to your calendar";
                    Toast toast = Toast.makeText(EventDetailActivity.this, eventAdded, Toast.LENGTH_LONG);
                    toast.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL, 0, 0);
                    toast.show();
                } catch (SecurityException s) {
                    s.printStackTrace();
                    return;
                }
            }
        });

        String userEmail = FirebaseAuth.getInstance().getCurrentUser().getEmail();
        final String formattedEmail = userEmail.replace(".", "\\");
        final FirebaseDatabase database = FirebaseDatabase.getInstance();
        DatabaseReference eventsReference = database.getReference("Events");
        DatabaseReference eventReference = eventsReference.child(event.getTitle());
        final DatabaseReference peopleReference = eventReference.child("People Interested");
        final DatabaseReference userReference = database.getReference("Users/" + formattedEmail);

        //Listens for users being added or removed to the list of people interested an event
        peopleReference.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                Log.e("Number", String.valueOf(dataSnapshot.getKey()));
                peopleInterested.setText(String.valueOf(dataSnapshot.getChildrenCount()));
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });

        /**
         * Adds the user to a list of interested people in an event and adds the event to a list of
         * events that the user is interested in
         */
        interestedButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                peopleReference.child(formattedEmail).setValue(displayName);
                userReference.push().setValue(event.getTitle());
            }
        });

        /**
         * Implicit intent that opens google maps navigation to the address of the event from the
         * user's current location. Implicit intent code based on: https://developers.google.com/
         * maps/documentation/android-api/intents
         */
        mapsButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String formattedAddress = event.getAddress().replace(" ", "+");
                Uri gmmIntentUri = Uri.parse("google.navigation:q=" + formattedAddress);
                Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);
                mapIntent.setPackage("com.google.android.apps.maps");
                startActivity(mapIntent);
            }
        });

    }

    /**
     * Uses a date in mm/dd/yyyy format and a time in hh:mm AM/PM format to calculate the exact time
     * in milliseconds
     *
     * @param date A date in the mm/dd/yyyy format
     * @param time A time in mm:hh AM/PM format
     * @return The exact number of milliseconds of the date/time specified
     */
    private long calculateTimeInMillis(String date, String time) {
        //Breaks up the date and time into its individual components
        String[] dateComponents = date.split("/");
        int year = Integer.parseInt(dateComponents[2]);
        int month = Integer.parseInt(dateComponents[0]) - 1;
        int day = Integer.parseInt(dateComponents[1]);

        String[] timeComponents = time.split(":");
        int hour = Integer.parseInt(timeComponents[0]);
        //The millisecond conversion uses military time, so add 12 if the time is any time in pm after 12 pm
        int midDay = 12;
        int conversionToPM = 12;
        if (timeComponents[1].contains("p") && hour != midDay) {
            hour += conversionToPM;
        }
        int minute = Integer.parseInt(timeComponents[1].substring(0, 2));

        //Uses the date/time components above to calculate the exact end time in milliseconds
        Calendar exactTime = Calendar.getInstance();
        exactTime.set(year, month, day, hour, minute);
        return exactTime.getTimeInMillis();
    }

    /**
     * /**
     * Displays the sign out button in the top right of the mneu
     *
     * @param menu The menu of the current Activity
     * @return A boolean signifying if the creation of the menu was successful
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.constant_menu, menu);
        return true;
    }

    /**
     * Makes the sign out button cause the user to sign out from Firebase when clicked
     *
     * @param item The specific item that was clicked
     * @return A boolean signifying if the handling of the click on the menu item was successful
     */
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == R.id.menu_sign_out_button) {
            AuthUI.getInstance().signOut(this);
            Intent intent = new Intent(EventDetailActivity.this, AuthActivity.class);
            intent.putExtra(getString(R.string.sign_out_key), "Signed Out");
            startActivity(intent);
            return true;
        } else {
            return super.onOptionsItemSelected(item);
        }
    }
}
