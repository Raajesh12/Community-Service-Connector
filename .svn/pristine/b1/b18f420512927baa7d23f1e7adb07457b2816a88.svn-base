package com.example.raajesharunachalam.communityserviceconnector;

import android.content.Context;
import android.location.Location;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.Toast;

import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.gson.Gson;
import com.google.gson.stream.JsonReader;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;

/**
 * Takes in part of an event's details and then uses the address to make a call to the Google Maps
 * API and find the latitude/longitude of the address. Then pushes the new event to the database
 * <p>
 * Created by raajesharunachalam on 4/21/17.
 *
 * @author arnchlm2
 */

public class GoogleMapsAsyncTask extends AsyncTask<String, Void, MapsList> {

    private static final String TAG = "GoogleMapsAsyncTask";

    Context context;
    String eventTitle;
    Map<String, String> eventDetails;

    public GoogleMapsAsyncTask(Context context, String eventTitle, Map<String, String> eventDetails) {
        this.context = context;
        this.eventTitle = eventTitle;
        this.eventDetails = eventDetails;
    }

    /**
     * Calls the Google Maps API with the address/location entered by the user and serializes
     * the JSON received into objects.
     *
     * @param addresses The address the user enters. It will always only be 1 String
     * @return A MapsList object that contains the response from the Google Maps API
     */
    @Override
    protected MapsList doInBackground(String... addresses) {
        try {
            //Format the address and generate the proper API call URL
            String address = addresses[0];
            String addressFormatted = address.replace(' ', '+');
            String urlString = GoogleAPIConstants.GEOCODING_BASE_URL + addressFormatted +
                    "&key=" + GoogleAPIConstants.Maps_API_KEY;

            //Make the network request and serialize the resulting JSON into the proper objects
            URL url = new URL(urlString);
            InputStream inStream = url.openStream();
            InputStreamReader reader = new InputStreamReader(inStream, Charset.forName("UTF-8"));
            JsonReader jsonReader = new JsonReader(reader);
            Gson gson = new Gson();
            MapsList mapsList = gson.fromJson(jsonReader, MapsList.class);
            return mapsList;
        } catch (MalformedURLException e) {
            e.printStackTrace();
            return null;
        } catch (IOException i) {
            i.printStackTrace();
            return null;
        }
    }

    /**
     * Uses the coordinates retrieved by the Google Maps API and the other associated event details
     * passed into this task to add the new event to the database.
     *
     * @param mapsList A MapsList object which contains the serialized response from the Google
     *                 Maps API
     */
    @Override
    protected void onPostExecute(MapsList mapsList) {
        boolean statusCorrect = mapsList.getStatus().equals("OK");
        if (mapsList != null && statusCorrect) {
            MapsResultsComponents[] results = mapsList.getResults();

            String formattedAddress = results[0].getFormattedAddress();
            eventDetails.put(Event.ADDRESS_KEY, formattedAddress);

            MapsLocation location = results[0].getGeometry().getLocation();

            String latitutde = String.valueOf(location.getLatitude());
            eventDetails.put(Event.LATITUDE_KEY, latitutde);

            String longitude = String.valueOf(location.getLongitude());
            eventDetails.put(Event.LONGITUDE_KEY, longitude);

            //Tries to add the new event with associated details to the database
            try {
                DatabaseOperations.addEvent(eventTitle, eventDetails);
            } catch (InterruptedException i) {
                Log.d(TAG, "Database operation interrupted");
            }

        } else {
            String errorMessage = "Error in network connection or address inputted";
            Toast.makeText(context, errorMessage, Toast.LENGTH_LONG).show();
        }
    }

}
