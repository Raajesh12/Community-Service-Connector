package com.example.raajesharunachalam.communityserviceconnector;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.auth.api.signin.GoogleSignInResult;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.SignInButton;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.GoogleAuthProvider;
import com.squareup.picasso.Picasso;

/**
 * Activity that demonstrates Firebase Authentication through Google Sign in. Uses Firebase
 * Authentication library and the Google Play Services Authentication library.
 * Code modeled from API documentation: https://firebase.google.com/docs/auth/android/google-signin.
 *
 * @author arnchlm3
 */
public class AuthenticationActivity extends AppCompatActivity implements GoogleApiClient.OnConnectionFailedListener {

    public static final int SIGN_IN_CODE = 10;

    SignInButton signInButton;
    TextView signInStatus;
    TextView signedInName;
    Button signOutButton;
    ImageView profileImage;
    Button continueButton;

    GoogleApiClient mGoogleApiClient;
    private FirebaseAuth mAuth;
    private FirebaseAuth.AuthStateListener mAuthListener;


    /**
     * Creates the OnClickListeners and other event handlers for detecting the sign in/sign out of
     * users essential for the app to perform.
     *
     * @param savedInstanceState A previous instance of the app and associated data.
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_authentication);

        signInStatus = (TextView) findViewById(R.id.sign_in_status);

        signedInName = (TextView) findViewById(R.id.signed_in_name);

        profileImage = (ImageView) findViewById(R.id.profile_image);

        mAuth = FirebaseAuth.getInstance();

        //Used to detect when a user signs in/signs out and apply the appropriate UI changes
        mAuthListener = new FirebaseAuth.AuthStateListener() {
            @Override
            public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) {
                FirebaseUser user = mAuth.getCurrentUser();
                if (user != null) {
                    //New sign in
                    updateUISignIn(user.getDisplayName(), user.getPhotoUrl());
                } else {
                    //User Recently sign out, so reset user data to blanks
                    updateUISignOut();
                }
            }
        };


        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestIdToken(GoogleAPIConstants.AUTHENTICATION_REQUEST_CODE)
                .requestEmail()
                .build();

        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .enableAutoManage(this /* FragmentActivity */, this /* OnConnectionFailedListener */)
                .addApi(Auth.GOOGLE_SIGN_IN_API, gso)
                .build();

        //Allows the user to sign in with the GoogleSignInApi's implicit intent
        signInButton = (SignInButton) findViewById(R.id.sign_in_button);
        signInButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);
                startActivityForResult(signInIntent, SIGN_IN_CODE);
            }
        });

        //Allows the user to sign out and resets the UI to a signed out state
        signOutButton = (Button) findViewById(R.id.sign_out_button);
        signOutButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (mAuth.getCurrentUser() != null) {
                    mAuth.signOut();
                    Auth.GoogleSignInApi.signOut(mGoogleApiClient);
                }
            }
        });

        //Allows the user to go to the next demonstration activity in this app
        continueButton = (Button) findViewById(R.id.continue_button);
        continueButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(AuthenticationActivity.this, LocationActivity.class);
                FirebaseUser user = mAuth.getCurrentUser();
                intent.putExtra(getString(R.string.display_name_key), user.getDisplayName());
                intent.putExtra(getString(R.string.display_photo_key), user.getPhotoUrl());

                startActivity(intent);
            }
        });
    }

    /**
     * Begins checking for User sign in/sign out as the app starts
     */
    @Override
    public void onResume(){
        super.onResume();
        mAuth.addAuthStateListener(mAuthListener);
    }
    /**
     * Cleans up the UI and stops checking for sign in/sign out updates as the app is destroyed by
     * the user or the Android system.
     */
    @Override
    public void onDestroy() {
        if (mAuth.getCurrentUser() != null) {
            //Sign out the user as the application closes
            mAuth.signOut();
            updateUISignOut();
        }
        mAuth.removeAuthStateListener(mAuthListener);
        super.onDestroy();
    }


    /**
     * Handles the result of an Activity that was started to get a specific result
     *
     * @param requestCode The unique code used to start the Activity for its result
     * @param resultCode  The status of the results the Activity sent back
     * @param data        Data that was sent back from the Activity describing its result
     */
    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        // Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...);
        if (requestCode == SIGN_IN_CODE) {
            GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);

            if (result.isSuccess()) {
                // Signed in successfully, show authenticated UI, and sign into Firebase
                GoogleSignInAccount acct = result.getSignInAccount();
                firebaseAuthFromGoogle(acct);
            } else {
                //No valid user chosen or invalid log in credentials
                String failedLogInGoogle = "Failed Log In. Wrong Google username/password";
                Toast.makeText(AuthenticationActivity.this, failedLogInGoogle,
                        Toast.LENGTH_SHORT).show();
            }
        }
    }

    /**
     * Signs in the user to Firebase specifically
     *
     * @param acct The Google account that was just signed into successfully
     */
    private void firebaseAuthFromGoogle(GoogleSignInAccount acct) {
        AuthCredential credential = GoogleAuthProvider.getCredential(acct.getIdToken(), null);
        mAuth.signInWithCredential(credential)
                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {
                        // If sign in fails, display toast message to user
                        if (!task.isSuccessful()) {
                            String failedLogInFirebase = "Failed Log In. Wrong username/password";
                            Toast.makeText(AuthenticationActivity.this, failedLogInFirebase,
                                    Toast.LENGTH_SHORT).show();
                        }
                    }
                });
    }


    /**
     * Method used to handle events when there is no connection or a failed connection attempt to
     * the Google API Client.
     *
     * @param connectionResult The result of the failed connection attempt.
     */
    @Override
    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {
        Log.e("Connection failed", "Failed!!!");
    }

    /**
     * Updates the UI that displays the user's name and picture once they successfully sign in.
     *
     * @param displayName The user's display name on their Google account.
     * @param photoURL    A link to the profile photo of the user's Google account.
     */
    private void updateUISignIn(String displayName, Uri photoURL) {
        signInStatus.setText(getString(R.string.sign_in_display));
        Picasso.with(AuthenticationActivity.this).load(photoURL).resize(100, 100).into(profileImage);
        signedInName.setText(displayName);
    }

    /**
     * Updates the UI such as removing the display name/profile photo when a user signs out.
     */
    private void updateUISignOut() {
        signInStatus.setText(getString(R.string.sign_out_display));
        signedInName.setText("");
        profileImage.setImageResource(0);
    }
}
