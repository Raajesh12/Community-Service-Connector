package com.example.raajesharunachalam.communityserviceconnector;

import android.content.Intent;
import android.net.Uri;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.TimePicker;

import com.firebase.ui.auth.AuthUI;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.squareup.picasso.Picasso;

import java.util.HashMap;
import java.util.Map;

/**
 * Activity for the user to create a new event to add to the app with the proper details and input
 * boxes to do so.
 *
 * @author arnchlm2
 */
public class CreateEventActivity extends AppCompatActivity {

    static final int MID_DAY = 12;
    static final int NEW_DAY = 24;

    String displayName;
    Uri photoURL;
    TextView userName;
    ImageView userIcon;
    double latitude;
    double longitude;
    EditText title;
    EditText description;
    EditText address;
    DatePicker startDate;
    TimePicker startTime;
    DatePicker endDate;
    TimePicker endTime;
    EditText eventLink;
    EditText imageUrl;
    Button submitButton;

    /**
     * Initializes the layout for the user to enter data into and the onClickListener for when they
     * have completed the form
     *
     * @param savedInstanceState
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_create_event);

        userName = (TextView) findViewById(R.id.create_event_user_name);
        userIcon = (ImageView) findViewById(R.id.create_event_user_icon);

        Intent intent = getIntent();
        if (intent.hasExtra(getString(R.string.display_name_key)) && intent.hasExtra(getString(R.string.display_photo_key))) {
            displayName = intent.getStringExtra(getString(R.string.display_name_key));
            userName.setText("User: " + displayName);

            photoURL = (Uri) intent.getParcelableExtra(getString(R.string.display_photo_key));
            Picasso.with(this).load(photoURL).into(userIcon);
        }

        title = (EditText) findViewById(R.id.create_event_title_actual);
        description = (EditText) findViewById(R.id.create_event_description_actual);
        address = (EditText) findViewById(R.id.create_event_address_actual);
        startDate = (DatePicker) findViewById(R.id.create_event_start_date_actual);
        startTime = (TimePicker) findViewById(R.id.create_event_start_time_actual);
        endDate = (DatePicker) findViewById(R.id.create_event_end_date_actual);
        endTime = (TimePicker) findViewById(R.id.create_event_end_time_actual);
        eventLink = (EditText) findViewById(R.id.create_event_link_actual);
        imageUrl = (EditText) findViewById(R.id.create_event_image_actual);

        FirebaseDatabase database = FirebaseDatabase.getInstance();
        final DatabaseReference eventsReference = database.getReference("events");

        submitButton = (Button) findViewById(R.id.create_event_submit_button);

        //Grabs the data the user has entered and begins the process of pushing it to the database
        submitButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String titleInput = title.getText().toString();

                String descriptionInput = description.getText().toString();

                String addressInput = address.getText().toString();

                String startDateInput = (startDate.getMonth() + 1) + "/" + startDate.getDayOfMonth() + "/"
                        + startDate.getYear();

                String startTimeInput = getFormattedTime(startTime.getCurrentHour(), startTime.getCurrentMinute());

                String endDateInput = (endDate.getMonth() + 1) + "/" + endDate.getDayOfMonth() + "/"
                        + endDate.getYear();

                String endTimeInput = getFormattedTime(endTime.getCurrentHour(), endTime.getCurrentMinute());

                String link = eventLink.getText().toString();
                if (link.isEmpty()) {
                    link = Event.EVENT_LINK_DEFAULT;
                }

                String imageUrlInput = imageUrl.getText().toString();

                Map<String, String> eventDetails = new HashMap();
                eventDetails.put(Event.DESCRIPTION_KEY, descriptionInput);
                eventDetails.put(Event.START_DATE_KEY, startDateInput);
                eventDetails.put(Event.START_TIME_KEY, startTimeInput);
                eventDetails.put(Event.END_DATE_KEY, endDateInput);
                eventDetails.put(Event.END_TIME_KEY, endTimeInput);
                eventDetails.put(Event.EVENT_LINK, link);
                eventDetails.put(Event.IMAGE_URL_KEY, imageUrlInput);
                eventDetails.put(Event.PEOPLE_INTERESTED_KEY, Event.PEOPLE_INTERESTED_INITIAL_VALUE);

                /**
                 * Calls an AsyncTask that will find the latitude/longitude of the location and then
                 * push it to the database
                 */
                GoogleMapsAsyncTask finishAddEvent = new GoogleMapsAsyncTask(CreateEventActivity.this,
                        titleInput, eventDetails);

                finishAddEvent.execute(addressInput);

                Intent intent = new Intent(CreateEventActivity.this, LocationActivity.class);
                intent.putExtra(getString(R.string.display_name_key), displayName);
                intent.putExtra(getString(R.string.display_photo_key), photoURL);
                startActivity(intent);
            }
        });
    }

    /**
     * Returns a string that formats the time from a 24 hour view to an AM/PM view
     *
     * @param hour
     * @param minute
     * @return
     */
    public static String getFormattedTime(int hour, int minute) {
        String periodOfDay;
        if (hour > MID_DAY) {
            hour -= 12;
            periodOfDay = "PM";
        } else if (hour == NEW_DAY) {
            hour -= 12;
            periodOfDay = "AM";
        } else {
            periodOfDay = "AM";
        }

        //If the minute is 0, display 00 for standard clock format
        String minuteString;
        if (minute == 0) {
            minuteString = "00";
        } else {
            minuteString = String.valueOf(minute);
        }

        String formattedTime = hour + ":" + minuteString + " " + periodOfDay;
        return formattedTime;
    }

    /**
     * Displays the sign out button in the top right of the mneu
     *
     * @param menu The menu of the current Activity
     * @return A boolean signifying if the creation of the menu was successful
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.constant_menu, menu);
        return true;
    }

    /**
     * Makes the sign out button cause the user to sign out from Firebase when clicked
     *
     * @param item The specific item that was clicked
     * @return A boolean signifying if the handling of the click on the menu item was successful
     */
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == R.id.menu_sign_out_button) {
            AuthUI.getInstance().signOut(this);
            Intent intent = new Intent(CreateEventActivity.this, AuthActivity.class);
            intent.putExtra(getString(R.string.sign_out_key), "Signed Out");
            startActivity(intent);
            return true;
        } else {
            return super.onOptionsItemSelected(item);
        }
    }
}
